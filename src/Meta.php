<?php /**
* Assoto: dynamic loading of javascript, stylesheets, meta tags, etc.
*
* @author Kaloyan Tsvetkov (KT) <kaloyan@kaloyan.info>
* @package Assoto
* @link https://github.com/kktsvetkov/assoto/
* @license http://opensource.org/licenses/LGPL-3.0 GNU Lesser General Public License, version 3.0
*/

namespace Assoto;

/**
* Meta tags and link tags
*
* The meta tags ("<meta name='...' content='...'>"") and link tags
* ("<link rel='...' href='...'>") are usually attached to the
* "<head>...</head>" inside the HTML
*
* More about rel="canonical" link tag
* @see https://en.wikipedia.org/wiki/Canonical_link_element
* @see https://support.google.com/webmasters/answer/139066?hl=en
*
* More about rel="manifest" link tag
* @see https://developer.mozilla.org/en-US/docs/Web/Manifest
* @see https://developers.google.com/web/fundamentals/web-app-manifest/
*/
class Meta
{
	/**
	* Adds a link element
	*
	* Adds a link element as an asset, which will appear as
	* "<link rel='...' href='...'>" inserted into the "head" zone
	*
	* @param string $url canonical URL
	* @param string $rel "rel" attribute for the "<link>" tag; it specifies
	*	the relationship between the linked URL and this document;
	*	common values are "canonical", "dns-prefetch", "icon", "prev",
	*	"next", "manifest", etc.
	* @param string $id (optional) identifier for this asset; if left empty
	*	it will be generated by this method
	* @param array $extra (optional) extra attributes for the link tag, such as
	*	"type", "media", etc.
	*/
	public static function link($url, $rel, $id = '', array $extra = array())
	{
		if (empty($id))
		{
			$id = 'link:' . $rel . ':' . $url;
		}

		$extra = array(
			'href' => $url,
			'rel' => $rel,
			) + (array) $extra;

		return Stash::add(
			Stash::ZONE_HEAD,
			'<link ' . HTML::attributes($extra) . '/>',
			$id
		);
	}

	/**
	* Adds a meta tag
	*
	* Adds a meta tag as an asset, which will appear as
	* "<meta name='...' content='...'>" inserted into the "head" zone
	*
	* @param string $name name of the meta tag, such as "keywords",
	*	"description", "viewport", "generator", "content-type", etc.
	* @param string $content
	* @param string $id (optional) identifier for this asset; if left empty
	*	it will be generated by this method
	* @param array $extra (optional) extra attributes for the meta tag, such
	* 	as "type", "rel", etc.
	*/
	public static function meta($name, $content, $id = '', array $extra = array())
	{
		if (empty($id))
		{
			$id = 'meta:' . $name;
		}

		$extra = array(
			'name' => $name,
			'content' => $content,
			) + $extra;

		if ('content-type' == strtolower($name))
		{
			unset($extra['name']);
			$extra['http-equiv'] = $name;
		}

		return Stash::add(
			Stash::ZONE_HEAD,
			'<meta ' . HTML::attributes($extra) . '/>',
			$id
		);
	}

	/**
	* Adds a meta tag with property attribute
	*
	* Adds a meta tag as an asset, which will appear as
	* "<meta property='...' content='...'>" inserted into the "head" zone
	*
	* @param string $property property attribute for this meta tag, such
	*	as "og:title" and "fb:app_id"
	* @param string $content
	* @param string $id (optional) identifier for this asset; if left empty
	*	it will be generated by this method
	*/
	public static function property($property, $content, $id = '')
	{
		if (empty($id))
		{
			$id = 'meta:' . $property;
		}

		$extra = array(
			'property' => $property,
			'content' => $content,
			);

		return Stash::add(
			Stash::ZONE_HEAD,
			'<meta ' . HTML::attributes($extra) . '/>',
			$id
		);
	}

	///////////////////////////////////////////////////////////////////////

	/**
	* Adds a canonical link element
	*
	* Adds a canonical link element as an asset, which will appear as
	* "<link rel='canonical' href='...'>" inserted into the "head" zone
	*
	* There can be only one canonical URL for a page, and that is why this
	* method does not have an $id argument; instead the id for this element
	* is 'meta::canonical'
	*
	* @param string $url canonical URL
	*/
	public static function canonical($url)
	{
		return self::link($url, 'canonical', 'meta:canonical');
	}

	/**
	* Adds an icon link element
	*
	* Adds an icon link element as an asset, which will appear as
	* "<link rel='icon' href='...'>" inserted into the "head" zone
	*
	* @param string $url icon URL
	* @param string $type icon image MIME type, will be used as the
	*	type="..." attribute for the "<link>" tag
	*/
	public static function icon($url, $type = 'image/x-icon')
	{
		return self::link(
			$url,
			'icon',
			'meta:icon',
			array('type' => $type)
		);
	}

	public static function hreflang($url, $hreflang = 'x-default')
	{
		return self::link(
			$url,
			'alternative',
			'link:alternative:hreflang:' . (string) $hreflang,
			array('hreflang' => (string) $hreflang)
		);
	}
}
